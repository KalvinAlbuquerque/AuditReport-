%-------------- INÍCIO DA CATEGORIA Vulnerabilidades Relacionadas a Configurações de Segurança HTTP E TLS --------------
\subsection{Vulnerabilidades Relacionadas a Configurações de Segurança HTTP E TLS}
Esta categoria aborda as vulnerabilidades associadas à configuração inadequada ou ausente de medidas de segurança no protocolo HTTP e na implementação de TLS, cruciais para a proteção da comunicação entre o cliente e o servidor.

%-------------- INÍCIO DA SUBCATEGORIA Informações de Cabeçalho --------------
\subsubsection{Informações de Cabeçalho}
Esta subseção exibe vulnerabilidades associadas à ausência ou má configuração de cabeçalhos HTTP importantes. Tais cabeçalhos ajudam a prevenir ataques como clickjacking, XSS e vazamento de informações sensíveis, sendo essenciais para a segurança das aplicações web.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE HTTP Header Information Disclosure --------------
\item \textbf{HTTP Header Information Disclosure}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades Relacionadas a Configurações de Segurança HTTP E TLS/HTTP_header_Information_disclosure.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A vulnerabilidade de divulgação de informações em cabeçalhos HTTP ocorre quando o servidor web remoto envia cabeçalhos que revelam detalhes sensíveis, como a versão do servidor e as tecnologias utilizadas. Essas informações podem ser exploradas por um atacante para identificar potenciais pontos fracos ou vulnerabilidades específicas, facilitando a execução de ataques direcionados.

    É crucial que as organizações implementem práticas de segurança, como a minimização das informações expostas nos cabeçalhos HTTP, para reduzir o risco de exploração. A configuração adequada do servidor pode mitigar a divulgação desnecessária de dados que possam ser utilizados para comprometer a segurança da aplicação.

\textbf{Solução:} Para mitigar essa vulnerabilidade, recomendamos a modificação dos cabeçalhos HTTP do servidor web para não divulgar informações detalhadas sobre o servidor subjacente. A desativação ou modificação de cabeçalhos como Server, X-Powered-By, X-AspNet-Version e outros cabeçalhos que revelam a versão ou a tecnologia do servidor é essencial.

\textbf{Total de URIs Afetadas:} 3

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{http://trilhas.homologa.salvador.ba.gov.br}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE HTTP Header Information Disclosure --------------
%-------------- INÍCIO DA VULNERABILIDADE Missing 'X-Frame-Options' Header --------------
\item \textbf{Missing 'X-Frame-Options' Header}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades Relacionadas a Configurações de Segurança HTTP E TLS/Missing 'X-Frame-Options' Header.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A vulnerabilidade de ausência do cabeçalho X-Frame-Options ocorre quando o servidor web não retorna esse cabeçalho nas respostas HTTP. O cabeçalho X-Frame-Options é crucial para proteger os usuários contra ataques de clickjacking, um tipo de ataque onde o atacante engana o usuário a clicar em um elemento diferente do que ele percebe, frequentemente resultando na execução de ações não intencionais, como a revelação de informações confidenciais ou o controle do computador do usuário.

Sem a presença do cabeçalho X-Frame-Options, o conteúdo do site pode ser carregado em um frame ou iframe de outro site, o que facilita a exploração dessa vulnerabilidade. Isso ocorre porque um atacante pode embutir o site vulnerável em um iframe disfarçado, enganando o usuário a clicar em botões ou links que, na realidade, estão direcionados para outra ação maliciosa.

\textbf{Solução:} Para mitigar esse risco, recomenda-se configurar o servidor web para incluir o cabeçalho X-Frame-Options nas respostas HTTP. Esse cabeçalho pode ser configurado para bloquear a exibição da página em frames de outros sites, utilizando o valor DENY (proibindo completamente) ou SAMEORIGIN (permitindo apenas a exibição no mesmo domínio). Essa simples configuração ajuda a evitar que o conteúdo do site seja incorporado em páginas de terceiros, protegendo os usuários contra ataques de clickjacking.

\textbf{Total de URIs Afetadas:} 3

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{http://trilhas.homologa.salvador.ba.gov.br}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Missing 'X-Frame-Options' Header --------------
%-------------- INÍCIO DA VULNERABILIDADE Permissive HTTP Strict Transport Security Policy Detected --------------
\item \textbf{Permissive HTTP Strict Transport Security Policy Detected}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades Relacionadas a Configurações de Segurança HTTP E TLS/Permissive HTTP Strict Transport Security Policy Detected.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} O HTTP Strict Transport Security (HSTS) é um cabeçalho de resposta opcional que pode ser configurado no servidor para instruir o navegador a se comunicar exclusivamente via HTTPS. Ao ser configurado corretamente, o HSTS ajuda a proteger os usuários contra ataques de downgrade e interceptação de dados. No entanto, foi detectado que a política HSTS configurada para o servidor não possui um valor suficientemente longo para o parâmetro max-age ou não cobre subdomínios por meio da diretiva includeSubDomains.

\textbf{Solução:} Para melhorar a segurança e evitar que a política HSTS seja permissiva demais, é recomendado ajustar o parâmetro max-age para um valor de, pelo menos, 31536000 segundos (1 ano). Além disso, a diretiva includeSubDomains deve ser especificada para garantir que todos os subdomínios sejam protegidos pela mesma política HSTS.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Permissive HTTP Strict Transport Security Policy Detected --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Informações de Cabeçalho --------------
%-------------- INÍCIO DA SUBCATEGORIA Protocolos e Cifragem --------------
\subsubsection{Protocolos e Cifragem}
Esta subseção aborda a vulnerabilidade de protocolos e mecanismos de cifragem inadequados ou desatualizados em implementações TLS/SSL. Configurações fracas de criptografia podem permitir a interceptação de dados sensíveis, comprometendo a confidencialidade e integridade das informações.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE SSL/TLS Weak Cipher Suites Supported --------------
\item \textbf{SSL/TLS Weak Cipher Suites Supported}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Protocolos e Cifragem/SSL-TLS Weak Cipher Suites Supported.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} O servidor remoto suporta o uso de conjuntos de cifras (cipher suites) de SSL/TLS que oferecem criptografia insegura, incluindo suites de exportação e cifras com menos de 128 bits. Esses conjuntos de cifras são considerados inseguros porque proporcionam um nível de proteção inadequado, tornando mais fácil para um atacante decifrar os dados transmitidos.

    Conjuntos de cifras com menos de 128 bits de força não oferecem uma barreira suficiente contra ataques de força bruta e outros métodos de comprometimento de dados. O suporte a essas cifras pode expor a comunicação a riscos significativos, incluindo a interceptação de dados sensíveis e a perda da integridade da transmissão.

\textbf{Solução:} Recomenda-se reconfigurar a aplicação ou servidor afetado para desabilitar o suporte a conjuntos de cifras fracas. As cifras mais seguras, como AES (Advanced Encryption Standard) em modos de operação modernos (por exemplo, GCM), devem ser priorizadas. Além disso, a configuração do servidor deve ser revisada para garantir o suporte a protocolos e algoritmos de criptografia que estejam de acordo com as melhores práticas de segurança, como TLS 1.2 ou TLS 1.3, que oferecem melhorias significativas em segurança e desempenho.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE SSL/TLS Weak Cipher Suites Supported --------------
%-------------- INÍCIO DA VULNERABILIDADE SSL/TLS Forward Secrecy Cipher Suites Not Supported --------------
\item \textbf{SSL/TLS Forward Secrecy Cipher Suites Not Supported}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Protocolos e Cifragem/SSL-TLS Forward Secrecy Cipher Suites Not Supported}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} O host remoto utiliza pelo menos uma cifra SSL/TLS que não oferece segredo perfeito (FS), também conhecido como segredo perfeito de avanço (PFS). Essa é uma característica que garante que as chaves de sessão não serão comprometidas mesmo que a chave privada do servidor seja comprometida.


\textbf{Solução:} Reconfigure o servidor para desabilitar as cifras sem segredo perfeito e mantenha apenas as cifras que oferecem segredo perfeito (cifras baseadas em ECDHE ou DHE).

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE SSL/TLS Forward Secrecy Cipher Suites Not Supported --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Protocolos e Cifragem --------------
%-------------- FIM DA CATEGORIA Vulnerabilidades Relacionadas a Configurações de Segurança HTTP E TLS --------------
%-------------- INÍCIO DA CATEGORIA Vulnerabilidades Relacionadas a Configurações e Exposição de Informações --------------
\subsection{Vulnerabilidades Relacionadas a Configurações e Exposição de Informações}
Esta categoria reúne vulnerabilidades associadas a configurações inadequadas do servidor e à exposição de informações sensíveis, que podem ser acessadas por atacantes devido à falta de medidas de segurança apropriadas.

%-------------- INÍCIO DA SUBCATEGORIA Exposição de Código e Recursos --------------
\subsubsection{Exposição de Código e Recursos}
Aqui são abordadas vulnerabilidades relacionadas à exposição não intencional de código-fonte ou outros recursos sensíveis, como arquivos de configuração, chaves de API ou credenciais em endpoints acessíveis, que podem ser explorados por atacantes.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE Secret Data Disclosure --------------
\item \textbf{Secret Data Disclosure}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades Relacionadas a Configurações e Exposição de Informações/Exposição de Código e Recursos/Secret Data Disclosure}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A maioria das aplicações web depende de vários serviços públicos para fornecer funcionalidades aos seus usuários. Em designs seguros, o consumo desses serviços privados ou em nuvem exige autenticação, como chaves de API, credenciais baseadas em nome de usuário e senha, e dados sensíveis semelhantes.

No entanto, os desenvolvedores às vezes codificam esses dados em vários pontos de suas aplicações, sem perceber que isso pode se tornar publicamente disponível, por exemplo, em JavaScript no lado do cliente ou até mesmo em comentários HTML. Ao explorar essas informações sensíveis, um atacante remoto e não autenticado poderia obter acesso privilegiado aos serviços críticos utilizados pela aplicação web e pela organização.


\textbf{Solução:} Remova a exposição de dados secretos identificando a causa raiz do problema (por exemplo, inserção manual de dados no código ou variáveis de ambiente agrupadas no JavaScript do front-end). Gire os segredos para evitar o uso posterior caso tenham sido previamente obtidos por um ator malicioso.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{http://trilhas.homologa.salvador.ba.gov.br}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Secret Data Disclosure --------------
%-------------- INÍCIO DA VULNERABILIDADE Source Code Passive Disclosure --------------
\item \textbf{Source Code Passive Disclosure}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades Relacionadas a Configurações e Exposição de Informações/Exposição de Código e Recursos/Source Code Passive Disclosure.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} Foi detectada a divulgação passiva de código-fonte do lado do servidor na resposta do servidor. Aplicações web modernas utilizam diversas linguagens de programação que podem ser classificadas em duas categorias: linguagens do lado do cliente (executadas no navegador, como JavaScript) e linguagens do lado do servidor (executadas no servidor, como ASP, PHP, JSP, etc.), que formam as páginas dinâmicas enviadas ao cliente.

    Todo código do lado do servidor deve ser executado pelo servidor e nunca exposto ao cliente. No entanto, devido a configurações incorretas do servidor ou erros de sintaxe, pode ocorrer que o código do lado do servidor não seja executado e, em vez disso, seja enviado ao cliente. Como o código-fonte do lado do servidor frequentemente contém informações sensíveis, como strings de conexão de banco de dados ou detalhes sobre o fluxo de trabalho da aplicação, essa exposição representa um risco significativo.

    Criminosos cibernéticos podem tentar descobrir páginas que, acidentalmente ou propositalmente, permitem a divulgação do código-fonte do lado do servidor, a fim de identificar vulnerabilidades ou informações sensíveis.

\textbf{Solução:} É fundamental garantir que o servidor não entregue código do lado do servidor ao cliente. Para isso, deve-se corrigir a configuração incorreta do servidor ou ajustar o código do servidor para evitar essa exposição.

%---------------------------------------------------------------------------------
    \item

\textbf{Total de URIs Afetadas:} 1

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Source Code Passive Disclosure --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Exposição de Código e Recursos --------------
%-------------- FIM DA CATEGORIA Vulnerabilidades Relacionadas a Configurações e Exposição de Informações --------------
%-------------- INÍCIO DA CATEGORIA Vulnerabilidades Relacionadas a Injeção de Código --------------
\subsection{Vulnerabilidades Relacionadas a Injeção de Código}
Esta categoria trata das vulnerabilidades de injeção de código, onde entradas de usuário não são devidamente validadas ou filtradas, permitindo a execução de código malicioso que pode comprometer a aplicação e os dados do usuário.

%-------------- INÍCIO DA SUBCATEGORIA Outras Injeções --------------
\subsubsection{Outras Injeções}
Aqui são discutidas outras formas de injeção de código, como injeções em comandos de sistema, XML ou LDAP, que podem comprometer a segurança da aplicação e do servidor.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE HTML/CSS Injection --------------
\item \textbf{HTML/CSS Injection}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades Relacionadas a Injeção de Código/Outras Injeções/HTML-CSS Injection.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:}  A injeção HTML/CSS é um ataque que injeta caracteres arbitrários em uma página web. Quando uma aplicação não lida corretamente com dados fornecidos pelo usuário, um atacante pode fornecer conteúdo a uma aplicação web, normalmente através de um valor de parâmetro que é refletido na página. Esse ataque é frequentemente usado como parte de engenharia social, transmitindo uma URL que modifica completamente a página alvo com, por exemplo, um padrão de teste de autenticação falso, para roubar os identificadores do usuário. Em alguns casos, esse ataque também pode levar, direta ou indiretamente, a um Cross-Site Scripting (XSS).


\textbf{Solução:} Para remediar as vulnerabilidades de injeção HTML/CSS, é importante nunca usar dados não confiáveis ou não filtrados dentro do código de uma página HTML.
Dados não confiáveis podem originar-se não apenas do cliente, mas também de terceiros ou de arquivos previamente carregados, entre outros.
A filtragem de dados não confiáveis normalmente envolve a conversão de caracteres especiais para suas versões codificadas em entidades HTML (no entanto, existem outros métodos, consulte as referências). Esses caracteres especiais incluem:
\begin{itemize}
    \item \texttt{\&}
    \item \texttt{<}
    \item \texttt{>}
    \item \texttt{\'}
    \item \texttt{\"}
    \item \texttt{/}
\end{itemize}
Um exemplo de codificação de entidades HTML é converter \texttt{<} para \texttt{\&lt;}.

Embora seja possível filtrar entradas não confiáveis, existem cinco locais dentro de uma página HTML onde a entrada não confiável (mesmo que filtrada) nunca deve ser colocada:
\begin{enumerate}
    \item Diretamente em um script.
    \item Dentro de um comentário HTML.
    \item Em um nome de atributo.
    \item Em um nome de tag.
    \item Diretamente em CSS.
\end{enumerate}
Cada um desses locais possui sua própria forma de escape e filtragem.

\textbf{Total de URIs Afetadas:} 1

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE HTML/CSS Injection --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Outras Injeções --------------
%-------------- FIM DA CATEGORIA Vulnerabilidades Relacionadas a Injeção de Código --------------
%-------------- INÍCIO DA CATEGORIA Vulnerabilidades em Cookies e Segurança de Sessão --------------
\subsection{Vulnerabilidades em Cookies e Segurança de Sessão}
Esta categoria foca em vulnerabilidades relacionadas à segurança de cookies e sessões de usuário, essenciais para garantir que as informações de autenticação e sessão permaneçam protegidas contra roubo e ataques como fixação de sessão.

%-------------- INÍCIO DA SUBCATEGORIA Vulnerabilidades em Cookies e Segurança de Sessão --------------
\subsubsection{Vulnerabilidades em Cookies e Segurança de Sessão}
Descrição não disponível.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE Cookie Without SameSite Flag Detected --------------
\item \textbf{Cookie Without SameSite Flag Detected}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades em Cookies e Segurança de Sessão/Cookie Without SameSite Flag Detected.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} O atributo SameSite pode ser configurado em cookies para informar ao navegador se o cookie pode ser enviado junto com solicitações de sites diferentes (cross-site), ajudando a prevenir ataques de Cross-Site Request Forgery (CSRF). Esse atributo pode ter três valores possíveis:

    \begin{itemize}
    \item \textbf{Strict}: o cookie será enviado apenas em contextos de primeira parte, ou seja, apenas para o próprio site, impedindo que sites de terceiros o incluam em requisições.
    \item \textbf{Lax}: o cookie pode ser enviado em requisições GET de sites de terceiros, quando a navegação é iniciada pelo usuário em um link externo. Por exemplo, ao clicar em um link de um site externo, o cookie será incluído na solicitação.
    \item \textbf{None}: o cookie será explicitamente enviado pelo navegador em qualquer contexto, independentemente de ser uma requisição de primeira parte ou de terceiros.
    \end{itemize}

O scanner identificou que o aplicativo não configura ou configura incorretamente o atributo SameSite nos cookies. Isso pode resultar em um comportamento inesperado, já que o navegador pode, por padrão, enviar cookies em contextos cruzados, aumentando o risco de ataques CSRF.

\textbf{Solução:} Para mitigar essa vulnerabilidade, é essencial configurar o atributo SameSite em todos os cookies. O valor do atributo deve ser ajustado conforme o comportamento desejado. Ao usar o valor "None", é crucial também configurar o cookie com a flag \textit{Secure}, garantindo que ele seja enviado apenas por conexões HTTPS seguras.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Cookie Without SameSite Flag Detected --------------
%-------------- INÍCIO DA VULNERABILIDADE Cookie Without Secure Flag Detected --------------
\item \textbf{Cookie Without Secure Flag Detected}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades em Cookies e Segurança de Sessão/Cookie Without Secure Flag Detected.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} Quando a flag secure é configurada em um cookie, o navegador impede que ele seja enviado através de um canal de texto claro (HTTP), permitindo que o cookie seja enviado apenas quando uma conexão segura (HTTPS) for utilizada. Isso ajuda a garantir que os cookies contendo informações sensíveis não sejam expostos em conexões não seguras.

O scanner detectou que o servidor configurou um cookie sem a flag secure. Embora o cookie tenha sido inicialmente configurado em uma conexão HTTPS, qualquer link HTTP para o mesmo servidor resultará no envio do cookie em texto claro, o que pode comprometer a segurança dos dados transmitidos, caso o cookie contenha informações sensíveis.

Vale ressaltar que, se o cookie não contiver informações sensíveis, o risco dessa vulnerabilidade é reduzido.

\textbf{Solução:} Se o cookie contiver informações sensíveis, como credenciais de usuário, dados financeiros ou informações pessoais, é essencial que o servidor configure o cookie com a flag secure. Isso garantirá que o cookie seja transmitido apenas em conexões HTTPS, protegendo assim a integridade e confidencialidade dos dados.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Cookie Without Secure Flag Detected --------------
%-------------- INÍCIO DA VULNERABILIDADE Cookie Without HttpOnly Flag Detected --------------
\item \textbf{Cookie Without HttpOnly Flag Detected}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Vulnerabilidades em Cookies e Segurança de Sessão/Cookie Without HttpOnly Flag Detected.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A flag \texttt{HttpOnly} ajuda a prevenir que scripts do lado do cliente (como o JavaScript) acessem e usem o cookie. Isso é particularmente importante para proteger os cookies que contêm tokens de sessão do cliente, já que impede que um script malicioso, como um que explora uma vulnerabilidade de Cross-Site Scripting (XSS), possa roubar esses dados sensíveis.

Vale destacar que configurar a flag \texttt{HttpOnly} não previne ou resolve vulnerabilidades XSS diretamente, mas limita o escopo de exploração ao impedir que os cookies sejam acessados por scripts do lado do cliente.

\textbf{Solução:} O primeiro passo para corrigir essa vulnerabilidade é determinar se algum script do lado do cliente (como o JavaScript) precisa acessar o cookie. Se o cookie não precisar ser acessado por scripts, a flag \texttt{HttpOnly} deve ser configurada. Essa configuração ajuda a proteger os dados do cookie contra tentativas de roubo por meio de ataques XSS.

É importante observar que navegadores mais antigos podem não ser compatíveis com a flag \texttt{HttpOnly}, o que significa que esses clientes ainda estarão suscetíveis a esse tipo de ataque, mesmo com a configuração da flag.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{http://trilhas.homologa.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Cookie Without HttpOnly Flag Detected --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Vulnerabilidades em Cookies e Segurança de Sessão --------------
%-------------- FIM DA CATEGORIA Vulnerabilidades em Cookies e Segurança de Sessão --------------
%-------------- INÍCIO DA CATEGORIA Outras Vulnerabilidades Críticas e Explorações --------------
\subsection{Outras Vulnerabilidades Críticas e Explorações}
Esta categoria abrange vulnerabilidades de alta criticidade que não se encaixam diretamente nas categorias anteriores, mas representam riscos significativos para a segurança da aplicação, como falhas em redirecionamentos, autenticação e versões desatualizadas de software.

%-------------- INÍCIO DA SUBCATEGORIA Desafios de Configuração de Segurança --------------
\subsubsection{Desafios de Configuração de Segurança}
Esta subseção trata dos desafios decorrentes de configurações inadequadas de segurança, como permissões de acesso excessivas ou falta de autenticação multifatorial, que podem ser exploradas por atacantes para obter acesso não autorizado.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE Permissive Content Security Policy Detected --------------
\item \textbf{Permissive Content Security Policy Detected}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Outras Vulnerabilidades Críticas e Explorações/Desafios de Configuração de Segurança/Permissive Content Security Policy Detected.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A Política de Segurança de Conteúdo (CSP) é um padrão de segurança da web que ajuda a mitigar ataques como Cross-Site Scripting (XSS), clickjacking ou problemas de conteúdo misto. O CSP permite que os sites controlem quais recursos os navegadores podem carregar, restringindo o conteúdo carregado e aumentando a proteção contra ataques.

No entanto, uma política de CSP excessivamente permissiva pode permitir que conteúdos não seguros sejam carregados, o que enfraquece a eficácia da política. O scanner identificou uma ou mais diretivas permissivas na política de CSP do site, o que pode expor o site a ataques como injeção de scripts maliciosos (XSS), carregamento de conteúdo inseguro ou execução de código não autorizado.

As diretivas permissivas podem incluir, por exemplo, o uso de * ou *.* nas diretrizes de fontes (como script-src ou default-src), o que permite a execução de scripts ou o carregamento de recursos de origens não confiáveis. Isso pode comprometer a segurança da aplicação ao permitir a execução de código arbitrário proveniente de fontes não autorizadas.

\textbf{Solução:} Para corrigir essa vulnerabilidade, recomenda-se restringir a política de CSP e aplicar as diretivas de forma mais rígida. A seguir, estão algumas diretrizes gerais que podem ser implementadas:

- Defina frame-ancestors como none para evitar que a página seja renderizada dentro de <frame>, <iframe>, <object>, <embed> ou <applet>.
- Configure form-action explicitamente como self para restringir o envio de formulários apenas à origem do site.
- Evite o uso das diretivas unsafe-*, pois indicam ações inseguras. Refatore o código para não depender de manipuladores de eventos HTML que utilizem essas diretivas.
- Evite o uso de data:, https: ou http: nas diretivas default-src, object-src, base-uri e script-src, pois essas configurações permitem a execução de scripts não seguros.
- Não utilize * ou *.* em diretivas como script-src e outras diretrizes -src, pois isso permite a execução de scripts não seguros de origens não especificadas.
- Defina default-src explicitamente como self ou none, e defina as diretivas individuais de forma mais permissiva apenas quando necessário.
- Para APIs, deve-se evitar carregar recursos como scripts ou frames. Use uma política rígida com default-src 'none' e frame-ancestors 'none'.

Se for necessário usar algumas diretivas inseguras para a continuidade dos negócios, aplique controles mitigadores adequados ao seu ambiente e consulte os fornecedores dos produtos que exigem essas diretivas. Lembre-se de que existem versões diferentes do CSP e que algumas diretivas podem não ser suportadas em versões de navegador mais antigas.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Permissive Content Security Policy Detected --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Desafios de Configuração de Segurança --------------
%-------------- INÍCIO DA SUBCATEGORIA Redirecionamentos e Autenticação --------------
\subsubsection{Redirecionamentos e Autenticação}
Esta subseção discute vulnerabilidades em mecanismos de redirecionamento e autenticação, que podem permitir que atacantes realizem ataques de phishing, sequestro de sessão ou obtenham acesso indevido a recursos restritos.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE Password Field With Auto-Complete --------------
\item \textbf{Password Field With Auto-Complete}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Outras Vulnerabilidades Críticas e Explorações/Redirecionamentos e Autenticação/Password Field With Auto-Complete.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A vulnerabilidade Password Field With Auto-Complete ocorre quando um formulário de login permite que os navegadores completem automaticamente os campos de nome de usuário e senha, armazenando as credenciais do usuário localmente para reutilização. Isso pode ocorrer quando o atributo autocomplete não está desativado no campo de senha ou no formulário em si.
Em um cenário normal, o recurso de preenchimento automático é útil para facilitar o preenchimento de formulários. No entanto, se o preenchimento automático estiver habilitado em um campo de senha, um atacante que tenha acesso físico ao computador da vítima poderá visualizar e capturar as credenciais armazenadas, simplesmente acessando a página de login. Além disso, se o computador estiver comprometido por malware, esse recurso pode ser explorado para roubo de senhas.

O impacto dessa vulnerabilidade é elevado, pois pode expor as credenciais dos usuários a ataques locais. Esse risco é agravado se o dispositivo da vítima não estiver adequadamente protegido por medidas de segurança, como criptografia de dados e autenticação de múltiplos fatores.

\textbf{Solução:} Para mitigar essa vulnerabilidade, é recomendado desabilitar o preenchimento automático (autocomplete) nos campos de senha e em todo o formulário de login. Isso pode ser feito da seguinte maneira:

- Desabilitar o atributo autocomplete no elemento <form>, o que desativará o preenchimento automático para todos os campos do formulário: <form autocomplete="off">
- Desabilitar o atributo autocomplete no campo de senha especificamente, caso o preenchimento automático precise ser habilitado para outros campos do formulário: <input type="password" autocomplete="off">

Adotar essas práticas ajudará a reduzir o risco de exposição das credenciais armazenadas localmente em dispositivos comprometidos ou acessados indevidamente.

\textbf{Total de URIs Afetadas:} 3

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{http://trilhas.homologa.salvador.ba.gov.br}
    \item \url{https://concursotransparencia.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Password Field With Auto-Complete --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Redirecionamentos e Autenticação --------------
%-------------- INÍCIO DA SUBCATEGORIA Redirecionamentos e Autênticação --------------
\subsubsection{Redirecionamentos e Autênticação}
Descrição não disponível.

\begin{enumerate}
%-------------- INÍCIO DA VULNERABILIDADE Login Form Cross-Site Request Forgery --------------
\item \textbf{Login Form Cross-Site Request Forgery}

                        \begin{figure}[h!]
                        \centering
                        \includegraphics[width=0.8\textwidth]{assets/images-was/Outras Vulnerabilidades Críticas e Explorações/Redirecionamentos e Autenticação/Login Form Cross-Site Request Forgery.png}
                        \end{figure}
                        \FloatBarrier
                        \textbf{Descrição:} A vulnerabilidade de Cross-Site Request Forgery (CSRF) ocorre quando um usuário é induzido a clicar em um link que automaticamente submete uma solicitação sem o seu consentimento. Isso pode acontecer quando a solicitação não inclui um token anti-CSRF, gerado a cada visita e passado na submissão da solicitação. O backend da aplicação utiliza esse token para verificar se a requisição é originada de um usuário legítimo.

    Para que uma requisição vulnerável ao CSRF seja explorada, alguns fatores devem estar presentes:
    \begin{itemize}
        \item A requisição deve realizar uma ação sensível.
        \item O atacante deve induzir a vítima a clicar em um link que envie a requisição sem consentimento.
    \end{itemize}
    
    O impacto da exploração dessa vulnerabilidade costuma ser limitado, mas cenários complexos podem ser criados caso a aplicação também esteja vulnerável a Cross-Site Scripting (XSS).

\textbf{Solução:} Atualize a aplicação para incluir tokens anti-CSRF nesse formulário de login. A maioria dos frameworks web oferece soluções embutidas ou plugins que facilitam a adição desses tokens a qualquer formulário. Consulte as referências para possíveis soluções nos frameworks mais conhecidos.

\textbf{Total de URIs Afetadas:} 2

\textbf{Instâncias Afetadas:}
\begin{itemize}
    \item \url{http://trilhas.homologa.salvador.ba.gov.br}
    \item \url{https://cgm.salvador.ba.gov.br}
\end{itemize}

%-------------- FIM DA VULNERABILIDADE Login Form Cross-Site Request Forgery --------------
\end{enumerate}
%-------------- FIM DA SUBCATEGORIA Redirecionamentos e Autênticação --------------
%-------------- FIM DA CATEGORIA Outras Vulnerabilidades Críticas e Explorações --------------
%-------------- INÍCIO DAS VULNERABILIDADES SEM CATEGORIA --------------
\section{Vulnerabilidades sem Categoria}
\begin{itemize}
    \item Cross-Site Scripting (XSS)
\end{itemize}
%-------------- FIM DAS VULNERABILIDADES SEM CATEGORIA --------------
