import csv
import json
from collections import defaultdict
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'analysis')))
from json_parser import *
from report.report_generator import gerar_relatorio_latex, gerar_relatorio_txt, gerar_relatorio_txt_csv, gerar_relatorio_latex_csv
from csv_parser import obter_vulnerabilidades_comum_csv, contar_vulnerabilidades_csv, extrair_hosts_csv
from utils.utils import verificar_e_salvar_vulnerabilidades_ausentes

    
def processar_relatorio_json(caminho_arquivos_json: str, caminho_salvar_relatorio: str, caminho_relatorios_exemplo: str) -> None:
 
    """
    Função que encontra os arquivos JSON de relatórios, conta as vulnerabilidades e gera o relatório.
    """
    caminhos_relatorios = localizar_arquivos(caminho_arquivos_json, "json") 
    # data/relatórios_prontos/

    if caminhos_relatorios:
        
        # Contar as vulnerabilidades dividindo-as por criticas, altas, médias e baixas
        quantidade_vulnerabilidades_por_risco = contar_vulnerabilidades(caminhos_relatorios)

        # Obter vulnerabilidades comuns entre sites 
        vulnerabilidades_comuns = obter_vulnerabilidades_comum(caminhos_relatorios)

        #Obter Vulnerabilidades não categorizadas
        nome_arquivo_ausentes = "vulnerabilidades_sites_ausentes.txt" 
        verificar_e_salvar_vulnerabilidades_ausentes(vulnerabilidades_comuns,"../shared/relatorios/Exemplo/vulnerabilidades.json", caminho_salvar_relatorio,nome_arquivo_ausentes)

        # Obter os targets
        targets = extrair_targets(caminhos_relatorios)

        # Gerar o relatório
        gerar_relatorio_txt(f"{caminho_salvar_relatorio}/Sites_agrupados_por_vulnerabilidades.txt", quantidade_vulnerabilidades_por_risco, vulnerabilidades_comuns, targets)

        # Gerar o relatório em LaTeX
        gerar_relatorio_latex(f"{caminho_salvar_relatorio}/(LATEX)Sites_agrupados_por_vulnerabilidades.txt", caminho_salvar_relatorio, caminho_relatorios_exemplo)
    
def processar_relatorio_csv(caminho_arquivos_csv: str, caminho_salvar_relatorio: str, caminho_relatorios_exemplo: str) -> None:

    """
    Função que encontra os arquivos CSV de relatórios, conta as vulnerabilidades e gera o relatório.
    """
    caminhos_relatorios = localizar_arquivos(caminho_arquivos_csv, "csv")
    if caminhos_relatorios:
        
        # Obter vulnerabilidades comuns entre sites 
        vulnerabilidades_comuns = obter_vulnerabilidades_comum_csv(caminhos_relatorios)
        
        #Obter Vulnerabilidades não categorizadas
        nome_arquivo_ausentes = "vulnerabilidades_servidores_ausentes.txt" 
        verificar_e_salvar_vulnerabilidades_ausentes(vulnerabilidades_comuns,"../shared/relatorios/Exemplo/vulnerabilidades_servidores.json", caminho_salvar_relatorio,nome_arquivo_ausentes)

        # Contar as vulnerabilidades dividindo-as por criticas, altas, médias e baixas
        quantidade_vulnerabilidades_por_risco = contar_vulnerabilidades_csv(vulnerabilidades_comuns)
        
        # Obter os targets
        targets = extrair_hosts_csv(caminhos_relatorios)

        # Gerar o relatório
        gerar_relatorio_txt_csv(f"{caminho_salvar_relatorio}/Servidores_agrupados_por_vulnerabilidades.txt", quantidade_vulnerabilidades_por_risco, vulnerabilidades_comuns, targets)

        # Gerar o relatório em LaTeX
        gerar_relatorio_latex_csv(f"{caminho_salvar_relatorio}/(LATEX)Servidores_agrupados_por_vulnerabilidades.txt", caminho_salvar_relatorio, caminho_relatorios_exemplo)

def extrair_quantidades_vulnerabilidades_por_site(OUTPUT_PATH, caminhos_json):
    """
    Extrai dados de vulnerabilidades por site a partir de arquivos JSON,
    organiza os dados e gera um relatório no formato CSV.
    """
    try:
        # Caminho dos arquivos JSON
        CAMINHO_RELATORIOS_JSON = caminhos_json
        files = localizar_arquivos(CAMINHO_RELATORIOS_JSON, "json")

        # Lista para armazenar os dados extraídos
        new_rows = []
        print("Iniciando extração de vulnerabilidades...")

        # Extrair dados dos arquivos JSON
        for file in files:
            with open(file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            extracted_data = extrair_dados_vulnerabilidades(data)
            print(f"Dados extraídos para o arquivo {file}: {extracted_data}")

            if extracted_data:
                new_rows.append(extracted_data)

        # Ordenar os dados por total de vulnerabilidades em ordem decrescente
        sorted_rows = sorted(new_rows, key=lambda x: x['Total'], reverse=True)

        # Escrever os dados no arquivo CSV
        with open(OUTPUT_PATH, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['Site', 'Critical', 'High', 'Medium', 'Low', 'Total']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            # Escrever cabeçalho
            writer.writeheader()

            # Escrever linhas
            for row in sorted_rows:
                writer.writerow(row)

        print(f"Relatório gerado com sucesso em: {OUTPUT_PATH}")

    except Exception as e:
        print(f"Erro ao extrair dados: {e}")
        
        

RELATORIOS = {
    "json": processar_relatorio_json,
    "csv": processar_relatorio_csv,
}